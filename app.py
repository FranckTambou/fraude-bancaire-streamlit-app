%%writefile app.py
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, roc_curve, auc

# --- Configuration de la page Streamlit ---
st.set_page_config(page_title="D√©tection de Fraude Bancaire", layout="wide", initial_sidebar_state="expanded")

# --- Titre de l'application ---
st.title("üõ°Ô∏è Application de D√©tection de Fraude Bancaire")
st.markdown("""
    Cette application permet de pr√©dire la probabilit√© de fraude pour des transactions bancaires.
    Veuillez entrer les d√©tails de la transaction ci-dessous.
""")

# --- Chargement des mod√®les et pr√©processeurs ---
@st.cache_data # Mise en cache pour √©viter de recharger √† chaque interaction
def load_assets():
    try:
        base_path = os.path.dirname(__file__)
        
        model_path = os.path.join(base_path, 'best_logistic_regression_model.pkl')
        scaler_path = os.path.join(base_path, 'scaler.pkl')
        ohe_path = os.path.join(base_path, 'one_hot_encoder.pkl')
        imputer_num_path = os.path.join(base_path, 'imputer_numeric.pkl')
        imputer_cat_path = os.path.join(base_path, 'imputer_categorical.pkl')
        feature_cols_path = os.path.join(base_path, 'feature_columns.pkl')

        best_logistic_regression_model = joblib.load(model_path)
        scaler = joblib.load(scaler_path)
        one_hot_encoder = joblib.load(ohe_path)
        imputer_numeric = joblib.load(imputer_num_path)
        imputer_categorical = joblib.load(imputer_cat_path)
        feature_columns = joblib.load(feature_cols_path)

        st.sidebar.success("Mod√®le et pr√©processeurs charg√©s avec succ√®s !")
        return best_logistic_regression_model, scaler, one_hot_encoder, imputer_numeric, imputer_categorical, feature_columns
    except FileNotFoundError as e:
        st.error(f"Erreur: Fichier manquant. Assurez-vous que tous les fichiers .pkl sont dans le m√™me r√©pertoire que app.py. D√©tail: {e}")
        st.info(f"Fichiers attendus: best_logistic_regression_model.pkl, scaler.pkl, one_hot_encoder.pkl, imputer_numeric.pkl, imputer_categorical.pkl, feature_columns.pkl")
        st.stop()
    except Exception as e:
        st.error(f"Une erreur inattendue s'est produite lors du chargement des actifs: {e}")
        st.stop()

best_logistic_regression_model, scaler, one_hot_encoder, imputer_numeric, imputer_categorical, feature_columns = load_assets()

# --- D√©finition des colonnes num√©riques et cat√©gorielles pour l'input ---
numerical_cols = [
    'Amount', 'oldbalanceOrg', 'newbalanceOrig', 'oldbalanceDest', 'newbalanceDest'
]
categorical_cols = [
    'Type'
]

# --- Interface utilisateur pour l'entr√©e des donn√©es ---
st.header("Saisie des d√©tails de la transaction")

# Input pour la colonne 'Type' (cat√©gorielle)
type_options = ['PAYMENT', 'TRANSFER', 'CASH_OUT', 'DEBIT', 'CASH_IN']
selected_type = st.selectbox("Type de transaction", type_options)

col1, col2, col3 = st.columns(3)
with col1:
    amount = st.number_input("Montant de la transaction", min_value=0.0, format="%.2f")
    oldbalanceOrg = st.number_input("Solde initial du compte d'origine", min_value=0.0, format="%.2f")
with col2:
    newbalanceOrig = st.number_input("Nouveau solde du compte d'origine", min_value=0.0, format="%.2f")
    oldbalanceDest = st.number_input("Solde initial du compte de destination", min_value=0.0, format="%.2f")
with col3:
    newbalanceDest = st.number_input("Nouveau solde du compte de destination", min_value=0.0, format="%.2f")

# Pr√©diction
if st.button("Pr√©dire la fraude"):
    # Cr√©ation du DataFrame d'entr√©e
    input_data = pd.DataFrame({
        'Type': [selected_type],
        'Amount': [amount],
        'oldbalanceOrg': [oldbalanceOrg],
        'newbalanceOrig': [newbalanceOrig],
        'oldbalanceDest': [oldbalanceDest],
        'newbalanceDest': [newbalanceDest]
    })

    # Imputation des valeurs manquantes (si le Imputer a des strat√©gies sp√©cifiques)
    input_numerical = input_data[numerical_cols]
    input_categorical = input_data[categorical_cols]

    # --- MODIFICATION ICI POUR L'IMPUTATION NUM√âRIQUE ---
    if imputer_numeric:
        # Passer les VALEURS (array numpy) √† transform pour √©viter le probl√®me de noms de colonnes
        input_numerical_imputed_array = imputer_numeric.transform(input_numerical.values)
        # Recr√©er le DataFrame avec les bons noms de colonnes et l'index
        input_numerical_imputed = pd.DataFrame(input_numerical_imputed_array, columns=numerical_cols, index=input_numerical.index)
    else:
        input_numerical_imputed = input_numerical # Pas d'imputation num√©rique si imputer_numeric est None
    
    if imputer_categorical:
        input_categorical_imputed = pd.DataFrame(imputer_categorical.transform(input_categorical), columns=categorical_cols, index=input_categorical.index)
    else:
        input_categorical_imputed = input_categorical


    # One-Hot Encoding
    try:
        input_encoded = one_hot_encoder.transform(input_categorical_imputed)
        input_encoded_df = pd.DataFrame(input_encoded.toarray(), columns=one_hot_encoder.get_feature_names_out(categorical_cols), index=input_categorical_imputed.index)
    except Exception as e:
        st.error(f"Erreur lors de l'encodage One-Hot. Assurez-vous que toutes les cat√©gories possibles sont g√©r√©es : {e}")
        st.stop()


    # Concat√©nation des caract√©ristiques num√©riques et encod√©es
    processed_data = pd.concat([input_numerical_imputed, input_encoded_df], axis=1)

    # R√©ordonnancement et alignement des colonnes avec feature_columns (tr√®s important)
    final_input = pd.DataFrame(columns=feature_columns)
    for col in feature_columns:
        if col in processed_data.columns:
            final_input[col] = processed_data[col]
        else:
            final_input[col] = 0 # Remplir avec 0 pour les colonnes manquantes (si une cat√©gorie n'est pas pr√©sente)
    
    final_input = final_input.fillna(0)

    # --- MODIFICATION ICI POUR LE SCALING ---
    final_input_scaled = final_input.copy()
    # Passer les VALEURS (array numpy) √† transform pour le scaler aussi
    # Appliquer le scaler uniquement aux colonnes num√©riques qui √©taient utilis√©es pour entra√Æner le scaler
    final_input_scaled[numerical_cols] = scaler.transform(final_input_scaled[numerical_cols].values)

    # Pr√©diction de la probabilit√©
    prediction_proba = best_logistic_regression_model.predict_proba(final_input_scaled)[:, 1][0]
    
    # Interpr√©tation du r√©sultat
    st.subheader("R√©sultat de la pr√©diction :")
    if prediction_proba >= 0.5: # Seuil de 0.5 pour la d√©tection de fraude
        st.error(f"**Fraude d√©tect√©e !** Probabilit√© : {prediction_proba:.2%}")
        st.warning("Cette transaction pr√©sente une forte probabilit√© de fraude. Une v√©rification est recommand√©e.")
    else:
        st.success(f"**Non-fraude d√©tect√©e.** Probabilit√© : {prediction_proba:.2%}")
        st.info("Cette transaction semble l√©gitime.")

    st.markdown("---")
    st.subheader("D√©tails des donn√©es d'entr√©e trait√©es :")
    st.dataframe(final_input_scaled)

# --- Section d'information suppl√©mentaire (Sidebar) ---
st.sidebar.header("√Ä propos de l'application")
st.sidebar.info("""
    Cette application utilise un mod√®le de r√©gression logistique entra√Æn√© pour classifier
    les transactions bancaires comme frauduleuses ou non.
""")
st.sidebar.markdown("---")
st.sidebar.write("D√©velopp√© par [Votre Nom/Organisation]")
st.sidebar.write("Version : 1.0")

# --- Visualisation des m√©triques (si vous voulez ajouter des images statiques) ---
try:
    img_dir = os.path.dirname(__file__)
    st.image(os.path.join(img_dir, "ROC.png"), caption="Courbe ROC", use_column_width=True)
    st.image(os.path.join(img_dir, "confusion.png"), caption="Matrice de Confusion", use_column_width=True)
except FileNotFoundError:
    st.warning("Les images de performance (ROC.png, confusion.png) n'ont pas √©t√© trouv√©es. Assurez-vous de les uploader sur GitHub.")


